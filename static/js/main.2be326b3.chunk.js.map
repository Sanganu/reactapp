{"version":3,"sources":["components/Header.js","components/Footer.js","components/Cards.js","components/Scoreboard.js","components/Jumbotron.js","pages/Game.js","App.js","index.js"],"names":["Header","className","Footer","Cards","props","src","imagesrc","height","width","alt","onClick","cardClicked","id","Scoreboard","score","topscore","Jumbotron","Game","state","items","selecteditem","componentDidMount","setState","data","console","log","i","cont","length","clicked","shuffleItems","datalength","count","Math","floor","random","j","temp","this","map","item","key","clciked","Component","App","ReactDOM","render","document","getElementById"],"mappings":"20BAUeA,MARf,WACE,OAAO,4BAAQC,UAAU,wBAClB,6BACA,8CCMMC,MAPf,WACE,OAAO,4BAAQD,UAAU,WACpB,sD,yCCEQE,MAJf,SAAeC,GAAS,OACtB,yBAAKH,UAAY,YAAYI,IAAKD,EAAME,SAAUC,OAAO,MAAMC,MAAM,MAAMC,IAAI,OAAOC,QAAW,kBAAMN,EAAMO,YAAYP,EAAMQ,Q,OCIlHC,MAPf,SAAoBT,GAChB,OAAO,yBAAKH,UAAY,cACxB,sCAAYG,EAAMU,OAClB,2CAAiBV,EAAMW,YCaZC,MAhBf,WACI,OAAQ,0BAAMf,UAAU,mBAGd,uDACN,4BACY,2CACA,iEACA,qEACA,yFCkFLgB,E,2MAtFXC,MAAQ,CACJC,MAAO,GACPC,aAAc,GACdN,MAAO,EACPC,SAAU,G,EAIdM,kBAAoB,WAChB,EAAKC,SAAS,CAAEH,MAAOI,K,EAG3BZ,YAAc,SAACC,GACXY,QAAQC,IAAI,KAAMb,GAMlB,IALA,IAAIE,EAAQ,EAAKI,MAAMJ,MACnBC,EAAW,EAAKG,MAAMH,SACtBI,EAAQ,EAAKD,MAAMC,MACnBO,EAAI,EACJC,GAAO,EACJD,EAAIP,EAAMS,QAAUD,GAAM,CAC7B,GAAIR,EAAMO,GAAGd,KAAOA,EAEhB,GADAY,QAAQC,IAAIN,EAAMO,GAAGG,QAASV,EAAMO,GAAGd,KACd,IAArBO,EAAMO,GAAGG,QACTV,EAAMO,GAAGG,SAAU,EACnBf,IACAa,GAAO,EACPR,EAAQ,EAAKW,aAAaX,OAGzB,CACGL,EAAQC,IACRA,EAAWD,GAEfA,EAAQ,EACRa,GAAO,EACP,IAAK,IAAID,EAAI,EAAGA,EAAIP,EAAMS,OAAQF,IAC9BP,EAAMO,GAAGG,SAAU,EAI/BH,IAEJ,EAAKJ,SAAS,CAAEH,QAAOL,QAAOC,aAAY,WAAQS,QAAQC,IAAI,QAAS,EAAKP,MAAMC,MAAO,EAAKD,MAAMJ,W,EAIxGgB,aAAe,SAACX,GAGZ,IAFA,IAAIY,EAAaZ,EAAMS,OACnBI,EAAQ,EACLA,EAASD,EAAa,GAAI,CAC7B,IAAIL,EAAIO,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BK,EAAIH,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BM,EAAOlB,EAAMO,GACjBP,EAAMO,GAAKP,EAAMiB,GACjBjB,EAAMiB,GAAKC,EACXL,IAEJ,OAAOb,G,wEAGD,IAAD,OACL,OAAQ,yBAAKlB,UAAU,aACnB,yBAAKA,UAAU,OACX,yBAAKA,UAAU,UACX,kBAAC,EAAD,CACIa,MAAOwB,KAAKpB,MAAMJ,MAClBC,SAAUuB,KAAKpB,MAAMH,YAE7B,yBAAKd,UAAU,UACX,kBAAC,EAAD,QAGR,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,OACVqC,KAAKpB,MAAMC,MAAMoB,KAAI,SAACC,EAAMC,GAAP,OAClB,kBAAC,EAAD,CAAOnC,SAAUkC,EAAKnC,IAClBoC,IAAKA,EACL7B,GAAI4B,EAAK5B,GACT8B,QAASF,EAAKX,QACdlB,YAAa,EAAKA,wB,GAhF3BgC,aCYJC,MAVf,WACE,OACE,yBAAK3C,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCPN4C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.2be326b3.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nfunction Header ()  {\r\n  return(<header className=\"headerline mt-2 pt-2\">\r\n         <nav>\r\n         <h2>Memory GAME</h2>\r\n        </nav>\r\n      </header>)\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from 'react';\r\n// import styled from 'styled-components';\r\n// import \"./style.css\";\r\n\r\nfunction Footer ()  {\r\n  return(<footer className=\"#0d47a1\" >\r\n       <p>&copy;Sangeetha.K, 2020</p>\r\n\r\n      </footer>)\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\" ;\r\n// import styled from \"styled-components\";\r\nimport \"./style.css\";\r\n\r\nfunction Cards(props) { return(\r\n  <img className = \"cardstyle\" src={props.imagesrc} height=\"200\" width=\"200\" alt=\"text\" onClick = {() => props.cardClicked(props.id)}/>\r\n)\r\n}\r\nexport default Cards;","import React from \"react\";\r\n\r\nfunction Scoreboard(props){\r\n    return(<div className = \"scoreboard\">\r\n    <h5>Score: {props.score}</h5>\r\n    <span>TopScore: {props.topscore}</span>\r\n    </div>)\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React from 'react';\r\n\r\nfunction Jumbotron() {\r\n    return (<main className=\"container jumbo\">\r\n        {/* <div className=\"row\">\r\n            <div className=\"col sm 12\"> */}\r\n              <h6>Clicky Game using React</h6>\r\n        <ul>\r\n                    <li>Memory game</li>\r\n                    <li>Try to Click all the images once </li>\r\n                    <li>The Cards are shuffled for each click</li>\r\n                    <li>If you click the same card twice the game is restarted</li>\r\n                </ul>\r\n            {/* </div>\r\n        </div> */}\r\n    </main>)\r\n}\r\n\r\nexport default Jumbotron;\r\n","import React, { Component } from 'react';\r\nimport Cards from \"../components/Cards\";\r\nimport data from \"../data/data\";\r\nimport Scoreboard from \"../components/Scoreboard\";\r\nimport Jumbotron from \"../components/Jumbotron\";\r\n\r\nclass Game extends Component {\r\n    state = {\r\n        items: [],\r\n        selecteditem: \"\",\r\n        score: 0,\r\n        topscore: 0,\r\n\r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({ items: data })\r\n    }\r\n\r\n    cardClicked = (id) => {\r\n        console.log(\"Id\", id);\r\n        let score = this.state.score;\r\n        let topscore = this.state.topscore;\r\n        let items = this.state.items;\r\n        let i = 0;\r\n        let cont = true;\r\n        while (i < items.length && cont) {\r\n            if (items[i].id === id) {\r\n                console.log(items[i].clicked, items[i].id)\r\n                if (items[i].clicked === false) {\r\n                    items[i].clicked = true;\r\n                    score++;\r\n                    cont = false;\r\n                    items = this.shuffleItems(items);\r\n\r\n                }\r\n                else {\r\n                    if (score > topscore) {\r\n                        topscore = score;\r\n                    }\r\n                    score = 0;\r\n                    cont = false;\r\n                    for (let i = 0; i < items.length; i++) {\r\n                        items[i].clicked = false\r\n                    }\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        this.setState({ items, score, topscore }, () => { console.log(\"State\", this.state.items, this.state.score) });\r\n\r\n    }\r\n\r\n    shuffleItems = (items) => {\r\n        let datalength = items.length;\r\n        let count = 0;\r\n        while (count < (datalength / 2)) {\r\n            let i = Math.floor(Math.random() * datalength)\r\n            let j = Math.floor(Math.random() * datalength)\r\n            let temp = items[i];\r\n            items[i] = items[j];\r\n            items[j] = temp;\r\n            count++;\r\n        }\r\n        return items;\r\n    }\r\n\r\n    render() {\r\n        return (<div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col s4\">\r\n                    <Scoreboard\r\n                        score={this.state.score}\r\n                        topscore={this.state.topscore} />\r\n                </div>\r\n                <div className=\"col s8\">\r\n                    <Jumbotron />\r\n                </div>\r\n            </div>\r\n            <div className=\"container #e91e63\">\r\n                <div className=\"row\">\r\n                    {this.state.items.map((item, key) => (\r\n                        <Cards imagesrc={item.src}\r\n                            key={key}\r\n                            id={item.id}\r\n                            clciked={item.clicked}\r\n                            cardClicked={this.cardClicked} />\r\n                    ))}\r\n                </div>\r\n            </div>\r\n        </div>)\r\n    }\r\n}\r\nexport default Game;\r\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Game from \"./pages/Game.js\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}