{"version":3,"sources":["components/Header.js","components/Footer.js","components/Cards.js","components/Scoreboard.js","pages/Game.js","App.js","index.js"],"names":["Header","className","Footer","Cards","props","src","imagesrc","height","width","alt","onClick","cardClicked","id","Scoreboard","score","topscore","Game","state","items","selecteditem","componentDidMount","setState","data","console","log","i","cont","length","clicked","shuffleItems","datalength","count","Math","floor","random","j","temp","this","map","item","key","clciked","Component","App","ReactDOM","render","document","getElementById"],"mappings":"0zBAoBeA,MAPf,WACE,OAAO,yBAAKC,UAAU,cACf,6CCJMC,MAPf,WACE,OAAO,6BACF,2D,yCCEQC,MAJf,SAAeC,GAAS,OACtB,yBAAKH,UAAY,YAAYI,IAAKD,EAAME,SAAUC,OAAO,MAAMC,MAAM,MAAMC,IAAI,OAAOC,QAAW,kBAAMN,EAAMO,YAAYP,EAAMQ,Q,OCIlHC,MAPf,SAAoBT,GAChB,OAAO,yBAAKH,UAAY,cACxB,sCAAYG,EAAMU,OAClB,2CAAiBV,EAAMW,YC4EXC,E,2MA3EZC,MAAQ,CACJC,MAAO,GACPC,aAAe,GACfL,MAAO,EACPC,SAAW,G,EAIfK,kBAAoB,WAChB,EAAKC,SAAS,CAACH,MAAMI,K,EAGzBX,YAAc,SAACC,GACXW,QAAQC,IAAI,KAAKZ,GAMjB,IALA,IAAIE,EAAQ,EAAKG,MAAMH,MACnBC,EAAW,EAAKE,MAAMF,SACtBG,EAAQ,EAAKD,MAAMC,MACnBO,EAAG,EACHC,GAAO,EACLD,EAAEP,EAAMS,QAAUD,GACxB,CAAK,GAAIR,EAAMO,GAAGb,KAAOA,EAEjB,GADAW,QAAQC,IAAIN,EAAMO,GAAGG,QAAQV,EAAMO,GAAGb,KACd,IAArBM,EAAMO,GAAGG,QACRV,EAAMO,GAAGG,SAAU,EACnBd,IACAY,GAAO,EACPR,EAAQ,EAAKW,aAAaX,OAG1B,CACIJ,EAAQC,IACRA,EAAWD,GAEfA,EAAQ,EACRY,GAAO,EACP,IAAI,IAAID,EAAE,EAAEA,EAAEP,EAAMS,OAAOF,IACvBP,EAAMO,GAAGG,SAAS,EAI9BH,IAEJ,EAAKJ,SAAS,CAACH,QAAMJ,QAAMC,aAAU,WAAKQ,QAAQC,IAAI,QAAQ,EAAKP,MAAMC,MAAM,EAAKD,MAAMH,W,EAI9Fe,aAAe,SAACX,GAGZ,IAFA,IAAIY,EAAaZ,EAAMS,OACnBI,EAAQ,EACNA,EAASD,EAAW,GAAG,CACzB,IAAIL,EAAIO,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BK,EAAIH,KAAKC,MAAMD,KAAKE,SAAWJ,GAC/BM,EAAOlB,EAAMO,GACjBP,EAAMO,GAAKP,EAAMiB,GACjBjB,EAAMiB,GAAGC,EACTL,IAEJ,OAAOb,G,wEAGF,IAAD,OACJ,OAAO,6BACH,kBAAC,EAAD,CACGJ,MAAOuB,KAAKpB,MAAMH,MAClBC,SAAUsB,KAAKpB,MAAMF,WACvBsB,KAAKpB,MAAMC,MAAMoB,KAAI,SAACC,EAAKC,GAAN,OAClB,kBAAC,EAAD,CAAOlC,SAAUiC,EAAKlC,IACtBmC,IAAKA,EACL5B,GAAI2B,EAAK3B,GACT6B,QAASF,EAAKX,QACdjB,YAAe,EAAKA,sB,GAvEjB+B,aCWJC,MAVf,WACE,OACE,yBAAK1C,UAAU,OACf,kBAAC,EAAD,MACC,kBAAC,EAAD,MACA,kBAAC,EAAD,QCLL2C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,W","file":"static/js/main.a62fc53b.chunk.js","sourcesContent":["import React from 'react';\r\n// import styled from 'styled-components';\r\n// import \"./style.css\";\r\n\r\n// const Button = styled.button`\r\n//     font-family: \r\n//     font-size: 2rem;\r\n//     border: 5px\r\n//     border-radius: 10px;\r\n// `;\r\n\r\n\r\n\r\nfunction Header ()  {\r\n  return(<div className=\"headerline\">\r\n         <h2>Memory GAME</h2>\r\n        \r\n      </div>)\r\n}\r\n\r\nexport default Header;\r\n\r\n\r\n","import React from 'react';\r\n// import styled from 'styled-components';\r\n// import \"./style.css\";\r\n\r\nfunction Footer ()  {\r\n  return(<div>\r\n       <p>&copy;Sangeetha Kaliaperumal</p>\r\n\r\n      </div>)\r\n}\r\n\r\nexport default Footer;\r\n","import React from \"react\" ;\r\n// import styled from \"styled-components\";\r\nimport \"./style.css\";\r\n\r\nfunction Cards(props) { return(\r\n  <img className = \"cardstyle\" src={props.imagesrc} height=\"200\" width=\"200\" alt=\"text\" onClick = {() => props.cardClicked(props.id)}/>\r\n)\r\n}\r\nexport default Cards;","import React from \"react\";\r\n\r\nfunction Scoreboard(props){\r\n    return(<div className = \"scoreboard\">\r\n    <h5>Score: {props.score}</h5>\r\n    <span>TopScore: {props.topscore}</span>\r\n    </div>)\r\n}\r\n\r\nexport default Scoreboard;\r\n","import React, { Component } from 'react';\r\nimport Cards from \"../components/Cards\";\r\nimport data from \"../data/data\";\r\nimport Scoreboard from \"../components/Scoreboard\";\r\n\r\nclass Game extends Component{\r\n    state = {\r\n        items :[],\r\n        selecteditem : \"\",\r\n        score: 0,\r\n        topscore : 0,\r\n    \r\n    }\r\n\r\n    componentDidMount = () => {\r\n        this.setState({items:data})\r\n    }\r\n\r\n    cardClicked = (id) => {\r\n        console.log(\"Id\",id);\r\n        let score = this.state.score;\r\n        let topscore = this.state.topscore;\r\n        let items = this.state.items;\r\n        let i =0;\r\n        let cont = true;\r\n        while(i<items.length && cont)\r\n        {    if( items[i].id === id){\r\n                console.log(items[i].clicked,items[i].id)\r\n                if(items[i].clicked === false){\r\n                    items[i].clicked = true;\r\n                    score++; \r\n                    cont = false;\r\n                    items = this.shuffleItems(items);\r\n                    \r\n                }\r\n                else{\r\n                    if (score > topscore){\r\n                        topscore = score;\r\n                    }\r\n                    score = 0;\r\n                    cont = false;\r\n                    for(let i=0;i<items.length;i++){\r\n                        items[i].clicked =false\r\n                    }\r\n                }\r\n            }\r\n            i++;\r\n        }\r\n        this.setState({items,score,topscore},()=>{console.log(\"State\",this.state.items,this.state.score)});\r\n      \r\n    }\r\n\r\n    shuffleItems = (items) => {\r\n        let datalength = items.length;\r\n        let count = 0;\r\n        while(count < (datalength/2)){\r\n            let i = Math.floor(Math.random() * datalength)\r\n            let j = Math.floor(Math.random() * datalength)\r\n            let temp = items[i];\r\n            items[i] = items[j];\r\n            items[j]=temp;\r\n            count++;\r\n        }\r\n        return items;\r\n    }\r\n\r\n    render(){\r\n        return(<div>\r\n            <Scoreboard\r\n               score={this.state.score}\r\n               topscore={this.state.topscore} />\r\n            {this.state.items.map((item,key)=>(\r\n                <Cards imagesrc={item.src}\r\n                key={key}\r\n                id={item.id}\r\n                clciked={item.clicked}\r\n                cardClicked = {this.cardClicked} />\r\n            ))}\r\n        </div>)\r\n    }\r\n}\r\nexport default  Game;\r\n","import React from 'react';\n\nimport './App.css';\nimport Header from \"./components/Header\";\nimport Footer from \"./components/Footer\";\nimport Game from \"./pages/Game.js\";\nfunction App() {\n  return (\n    <div className=\"App\">\n    <Header />\n     <Game />\n     <Footer />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n//import * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n// serviceWorker.unregister();\n"],"sourceRoot":""}